options {
    BUILD_PARSER=true;
    JJTREE_OUTPUT_DIRECTORY="wci/frontend";
    NODE_EXTENDS = "wci.intermediate.icodeimpl.ICodeNodeImpl";
    MULTI=true;
    VISITOR=true;
    //DEBUG_PARSER=true;


}
PARSER_BEGIN(CLikeParser)
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;


public class CLikeParser
{
  	private static SymTabStack symTabStack;
  	private static SymTabEntry programId;
  	//private static SymTabEntry functionId;  	
  	
    public static void main(String [] args) throws Exception
    {

      	//create symbol table
      	symTabStack = SymTabFactory.createSymTabStack();
      	Predefined.initialize(symTabStack);

      	String sourceFilePath = args[0];
      	
		//parse the program
		Reader reader = new FileReader(sourceFilePath);
		CLikeParser parser = new CLikeParser(reader);
		SimpleNode rootNode = parser.Program();
		//rootNode.dump(">");

		//Print cross reference
		CrossReferencer crossReferencer = new CrossReferencer();
		crossReferencer.print(symTabStack);

       /// Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);
        
        // Print the parse tree.
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);


		
      	
      	/*byte[] encoded = Files.readAllBytes(Paths.get(args[0]));
	  	String content = new String(encoded, StandardCharsets.UTF_8);
        java.io.StringReader sr = new java.io.StringReader(content);
        CLikeParser parser = new CLikeParser(sr);
        try {
            SimpleNode root = parser.Program();
            System.out.println("=====PRINTING PARSE TREE=====");
            root.dump(">");
            System.out.println("=====ENDING PARSE TREE=====");            
        }
        catch (ParseException ex) {
            ex.printStackTrace();
        }
        */
    }		
}
PARSER_END(CLikeParser)
/*
TOKEN_MGR_DECLS : {
    public static void main(String [] args) throws IOException
    {
	    byte[] encoded = Files.readAllBytes(Paths.get(args[0]));
	    String content = new String(encoded, StandardCharsets.UTF_8);
        java.io.StringReader sr = new java.io.StringReader(content);
        SimpleCharStream scs = new SimpleCharStream(sr);
        CLikeParserTokenManager mgr = new CLikeParserTokenManager(scs);


		while (mgr.getNextToken().kind != EOF) {}

    }


    
}
*/

SKIP : {
   <IGNORE : [" ", "\r", "\n", "\t"]>
   |< "//" (~["\n", "\r"])* >
  | <"/*"> : MULTILINE_COMMENT
}

<MULTILINE_COMMENT> SKIP: {
    "*/" : DEFAULT
}

<MULTILINE_COMMENT> MORE: {
    <~[]>
}


// TOKENS
//Reserved Words
TOKEN : {
 	<IF : "if">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
	| <ELSE : "else">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <VOID : "void">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <DOUBLE : "double">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <INT : "int">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <STRING_TYPE : "string">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
  	| <WHILE : "while">
 	{ debugStream.println("WHILE token: " + matchedToken.image); }
  	| <RETURN : "return">
 	{ debugStream.println("RETURN token: " + matchedToken.image); }
   	| <FOR : "for">
 	{ debugStream.println("FOR token: " + matchedToken.image); }
   	| <DEFINE : "define">
 	{ debugStream.println("DEFINE token: " + matchedToken.image); }
   	| <END : "end">
 	{ debugStream.println("END token: " + matchedToken.image); }	  	 	  	 		

}
//Special Symbols
TOKEN : {
< NOT : "!" >
{ debugStream.println("NOT SYMBOL token: " + matchedToken.image); }
| < PLUS : "+" >
{ debugStream.println("PLUS SYMBOL token: " + matchedToken.image); }
| < MINUS : "-" >
{ debugStream.println("MINUS SYMBOL token: " + matchedToken.image); }
| < MULTIPLY: "*" >
{ debugStream.println("MULTIPLY SYMBOL token: " + matchedToken.image); }
| < DIVIDE : "/" >
{ debugStream.println("DIVIDE SYMBOL token: " + matchedToken.image); }
| < EQUAL : "=" >
{ debugStream.println("EQUAL SYMBOL token: " + matchedToken.image); }
| < EQUAL_BOOL : "==" >
{ debugStream.println("EQUAL BOOLEAN SYMBOL token: " + matchedToken.image); }
| < INC : "++" >
{ debugStream.println("INCRIMENT SYMBOL token: " + matchedToken.image); }
| < DEC : "--" >
{ debugStream.println("DECREMENT SYMBOL token: " + matchedToken.image); }
| < SEMICOLON: ";" >
{ debugStream.println("SEMICOLON SYMBOL token: " + matchedToken.image); }
| < SINGLEQUOTE: "'" >
{ debugStream.println("SINGLE QUOTE token: " + matchedToken.image); }
| < LEFT_PAREN: "(" >
{ debugStream.println("LEFT PAREN token: " + matchedToken.image); }
| < RIGHT_PAREN: ")" >
{ debugStream.println("RIGHT PAREN token: " + matchedToken.image); }
| < LEFT_BRACKET: "{" >
{ debugStream.println("LEFT BRACKET token: " + matchedToken.image); }
| < RIGHT_BRACKET: "}" >
{ debugStream.println("RIGHT BRACKET token: " + matchedToken.image); }
| < GT: ">" >
{ debugStream.println("GT token: " + matchedToken.image); }
| < LT: "<" >
{ debugStream.println("LT token: " + matchedToken.image); }
| < LTE: "<=" >
{ debugStream.println("LTE token: " + matchedToken.image); }
| < GTE: ">=" >
{ debugStream.println("GTE token: " + matchedToken.image); }
| < NOT_EQUAL: "!=" >
{ debugStream.println("NOT_EQUAL token: " + matchedToken.image); }
| < OR: "||" >
{ debugStream.println("OR token: " + matchedToken.image); }
| < AND: "&&" >
{ debugStream.println("AND token: " + matchedToken.image); }
| < COMMA: "," >
{ debugStream.println("COMMA token: " + matchedToken.image); }
| < QUOTE: "\"" >
{ debugStream.println("QUOTE token: " + matchedToken.image); }
| < COLON: ":" >
{ debugStream.println("COLON token: " + matchedToken.image); }
}

  




//identifier
TOKEN : {
	< IDENTIFIER : < LETTER > (< LETTER > | < DIGIT > | "_")* >
	{ debugStream.println("IDENTIFIER TOKEN: " + matchedToken.image); }	
}
//numbers and char
TOKEN : {
< NUM : < INTEGER >  |< REAL > >
| < INTEGER: (<SIGN>)? (<DIGIT>)+ >
 { debugStream.println("INTEGER TOKEN: " + matchedToken.image); }
| <REAL:  (<SIGN>)? (<DIGIT>)+ "." | (<SIGN>)? "." (<DIGIT>)+ | (<SIGN>)? (<DIGIT>)+ "." (<DIGIT>)+ >
{ debugStream.println("REAL TOKEN: " + matchedToken.image); }

| < CHARACTER : <SINGLEQUOTE> (~[]){1} <SINGLEQUOTE>>
{ debugStream.println("CHARACTER token: " + matchedToken.image); }
| < STRING : <QUOTE> (~["\""])* <QUOTE>>
{ debugStream.println("STRING token: " + matchedToken.image); }
}

//Base regular expressions
TOKEN : {
  < #DIGIT : ["0" - "9"] >
| < #LETTER : ["a" - "z", "A" - "Z"] >
| < #SIGN : "-" | "+" >

}

//error token
TOKEN : {
	< ERROR: ~["\r", "\n"] >
}


    


// BCNF RULES

//parser starts here
SimpleNode Program() : {}
{
	{
		programId = symTabStack.enterLocal("CLike");
		programId.setDefinition(DefinitionImpl.PROGRAM);
		programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        //programId.setAttribute(ROUTINE_ROUTINES, new ArrayList<SymTabEntry>());		
		symTabStack.setProgramId(programId);
		
	}
	try {
		Statements()
		< EOF > {return jjtThis;}
		 
	}
	catch (ParseException ex) {
		handleError(ex);
		return null;
	}
}


void Statements(): {}
{
	(Statement())*
}

//NO FUNCTIONS FOR NOW
void Statement() #void :  {}
{
  	//looadhead 3 for distinguishing Assignments and function declorations.
	LOOKAHEAD(3)
	{System.out.println("=PARSING ASSIGNMENT=");}
	Assignment()
	{System.out.println("=END ASSIGNMENT=");}
	|LOOKAHEAD(3){System.out.println("=PARSING VARIABLE DECLARATION=");}
    variableDeclaration()
    {System.out.println("=END VARIABLE DECLARATION=");}	
	|LOOKAHEAD(2){System.out.println("=PARSING SIMPLE STATEMENT=");}
    SimpleStatement()
    {System.out.println("=END SIMPLE STATEMENT=");}
	|{System.out.println("=PARSING FUNCTION DECLORATION=");}
	 FunctionDeclaration()
	 {System.out.println("=FUNCTION DECLORATION END=");}
	|LOOKAHEAD(2){System.out.println("=PARSING FUNCTION CALL=");}
	 FunctionCall()
	 {System.out.println("=FUNCTION CALL END=");}	 
	|{System.out.println("=PARSING IF STATEMENT=");}
	 IfStatment()
	 {System.out.println("=ENDING IF STATEMENT=");}
	|{System.out.println("=PARSING WHILE LOOP=");}
	whileLoop()
	{System.out.println("=ENDING WHILE LOOP=");}
    | {System.out.println("=PARSING RETURN STATEMENT=");}
      returnStatement()
      {System.out.println("=END RETURN STATEMENT=");}
    | {System.out.println("=PARSING FOR LOOP=");}
      forLoop()
      {System.out.println("=END FOR LOOP=");}

	
}

void Assignment() : {}
{
  	//assignment statments eg (i = 0, i; or ;)
	< IDENTIFIER >
	{
		SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
	} (<EQUAL>	Expression())? <SEMICOLON >


}

void variableDeclaration() : {ArrayList<SymTabEntry> variableList;
	                                 int index = 0;}
{
  		DataType() {
  		    variableList = new ArrayList<SymTabEntry>();
	    	SymTabEntry typeId = symTabStack.lookup(token.image);
	        typeId.appendLineNumber(token.beginLine);
	        TypeSpec type = typeId.getTypeSpec();

        }

        <IDENTIFIER> {

            processVariableDecl(token, index++, variableList);
            
        }
        
        (
            <COMMA>
            <IDENTIFIER> {
                processVariableDecl(token, index++, variableList);
            	//processVariableDecl(token, index++, variableList);          
        	}
            
            

        )*
         {         	for (SymTabEntry variableId : variableList) {
	        	variableId.setTypeSpec(type);
	     	}
		 }
		(<EQUAL>	Expression())?
        <SEMICOLON>
}



void FunctionDeclaration() : {SimpleNode variableNode;}
{
	DataType()
	< IDENTIFIER > {
		
	}
	 <LEFT_PAREN > (DataType() Expression()(<COMMA > DataType() Expression())*)* < RIGHT_PAREN > < LEFT_BRACKET > Statements() < RIGHT_BRACKET >
}

void FunctionCall() : {}
{
	< IDENTIFIER > <LEFT_PAREN > paramaterList() < RIGHT_PAREN > 
}

void paramaterList() #void : {}
{
	(Expression() (<COMMA > Expression())*)*
}

//statments such as (z++;, z*z;)
void SimpleStatement() : {}
{
	Expression() < SEMICOLON >
}


void IfStatment() : {}
{
	If_Part() (Else_Part())?
}

void If_Part() #void: {}
{
  < IF > <LEFT_PAREN > Expression() < RIGHT_PAREN > <LEFT_BRACKET > Statements() < RIGHT_BRACKET >
}

void Else_Part() #void: {}
{
  < ELSE > <LEFT_BRACKET > Statements() < RIGHT_BRACKET >
}

void whileLoop() : {}
{
  < WHILE > <LEFT_PAREN > Expression() < RIGHT_PAREN > <LEFT_BRACKET> Statements() < RIGHT_BRACKET >
}

void forLoop() : {}
{
	< FOR ><LEFT_PAREN >  Expression()< SEMICOLON > forInc()< RIGHT_PAREN > <LEFT_BRACKET > Statements() < RIGHT_BRACKET >
}
//need to add support for statments like i = i+1
void forInc() #void : {}
{
	< IDENTIFIER > (incOrDec())
}

void returnStatement() : {}
{
	< RETURN > Expression() < SEMICOLON >
}


//CONDITIONS eg ( a == 9, b <4  ect
//void Conditions() : {}
//{

//	Expression() (Operators() Expression())*
//}

  

void DataType(): {}
{
	
	< VOID > 
	| < INT > 
	| < DOUBLE > 
	| < STRING_TYPE > 
	

}


void Operators() : {}
{
	< PLUS > | < MINUS > | < MULTIPLY > | < DIVIDE > | < EQUAL_BOOL > | < GT > | < LT > | < LTE > | < GTE > | < AND > | < OR > |< EQUAL >
}


//types that can be assigned to a variable
void assignmentType() : {}
{

	(LOOKAHEAD(2)FunctionCall()| Number() | < IDENTIFIER >)incOrDec() | String()
}



void Expression() : {}
{
	assignmentType() (Operators() assignmentType())*
}


void incOrDec() #void: {}
{
	(< INC > | < DEC >)?
}


void Number() : {}
{
 < NUM >
 {
    try{
  	  jjtThis.setTypeSpec(Predefined.integerType);
      jjtThis.setAttribute(VALUE, Integer.parseInt(token.image));
  	  
  	} catch( Exception e)
  	{
  	  	try
  	  	{
  	  	jjtThis.setTypeSpec(Predefined.realType);  
        jjtThis.setAttribute(VALUE, Float.parseFloat(token.image)); 
  	  	}catch( Exception e2)
  	  	{
			// must be error go to end of line 
  	  	}
  	}
  } 
}

//add strings since we prob wont do arrays
void String() : {}
{
	< STRING >
	{
		jjtThis.setTypeSpec(Predefined.charType);
		jjtThis.setAttribute(VALUE, new String(token.image));
	}
}

void identifier() : {}
{
        < IDENTIFIER >
}



void Error() #void : {}
{
    <ERROR>
}



JAVACODE
void processVariableDecl(Token token, int index,
                         ArrayList<SymTabEntry> variableList) #void
{
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
}


JAVACODE
String handleError(ParseException ex) #void
{
    Token token = ex.currentToken;
    System.out.println(ex.getMessage());

    do {
    	token = getNextToken();
    } while (token.kind != SEMICOLON);

	//jjtree.popNode();
    return token.image;
}

